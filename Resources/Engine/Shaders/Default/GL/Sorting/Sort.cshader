#version 430 core

#define COMPUTE_ENTRY main

#program compute

#include <TDEngine2Globals.inc>

#define SORT_SIZE   512
#define HALF_SIZE   (SORT_SIZE/2)
#define ITERATIONS  (HALF_SIZE > 1024 ? HALF_SIZE/1024 : 1)
#define NUM_THREADS (HALF_SIZE/ITERATIONS)
#define INVERSION   (16*2 + 8*3)


layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;


DECLARE_WRITEABLE_TYPED_BUFFER_EX(vec2, OutputData, 0);
DECLARE_TYPED_BUFFER_EX(uint, ElementsCount, 1);

shared vec2 LDS[SORT_SIZE];


void main(void) 
{
	uint elementsCount = TYPED_BUFFER_ACCESS(ElementsCount)[0];

    uint GlobalBaseIndex = (gl_WorkGroupID.x * SORT_SIZE) + gl_LocalInvocationID.x;
    uint LocalBaseIndex  = gl_LocalInvocationIndex;

    uint numElementsInThreadGroup = min(SORT_SIZE, elementsCount - (gl_WorkGroupID.x * SORT_SIZE));
    
    // Load shared OutputData
    int i;

    for (i = 0; i < 2 * ITERATIONS; ++i)
    {
        if (gl_LocalInvocationIndex + i * NUM_THREADS < numElementsInThreadGroup)
            LDS[LocalBaseIndex + i * NUM_THREADS] = TYPED_BUFFER_ACCESS(OutputData)[GlobalBaseIndex + i * NUM_THREADS];
    }

    memoryBarrierShared();
    barrier();
    
    // Bitonic sort
    for (uint nMergeSize = 2; nMergeSize <= SORT_SIZE; nMergeSize = nMergeSize * 2) 
    {
        for (int nMergeSubSize = int(nMergeSize) >> 1; nMergeSubSize > 0; nMergeSubSize = nMergeSubSize >> 1) 
        {
            for (i = 0; i < ITERATIONS; ++i)     
            {
                int tmp_index = int(gl_LocalInvocationIndex + NUM_THREADS * i);
                int index_low = tmp_index & (nMergeSubSize - 1);
                int index_high = 2 * (tmp_index-index_low);
                int index = index_high + index_low;

                uint nSwapElem = nMergeSubSize == nMergeSize >> 1 ? index_high + (2 * nMergeSubSize - 1) - index_low : index_high + nMergeSubSize + index_low;
                if (nSwapElem < numElementsInThreadGroup)
                {
                    vec2 a = LDS[index];
                    vec2 b = LDS[nSwapElem];

                    if (a.x > b.x)
                    { 
                        LDS[index] = b;
                        LDS[nSwapElem] = a;
                    }
                }

                memoryBarrierShared();
                barrier();
            }
        }
    }
    
    // Store shared OutputData
    for (i = 0; i < 2 * ITERATIONS; ++i)
    {
        if (gl_LocalInvocationIndex + i * NUM_THREADS < numElementsInThreadGroup)
            TYPED_BUFFER_ACCESS(OutputData)[GlobalBaseIndex + i * NUM_THREADS] = LDS[LocalBaseIndex + i * NUM_THREADS];
    }
}

#endprogram