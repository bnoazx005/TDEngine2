#define COMPUTE_ENTRY MainCS
#define ENABLE_MATH

#program compute

#include <TDEngine2Globals.inc>
#include <TDEngine2MathUtils.inc>


#define LIGHT_TILE_SIZE 16  // \todo Move into common include file


DECLARE_WRITEABLE_TYPED_BUFFER_EX(TileFrustum, OutputTileFrustums, 0);


CBUFFER_SECTION_EX(Parameters, 4)
	int2 mWorkGroups;
CBUFFER_ENDSECTION


[numthreads(16, 16, 1)]
void MainCS(uint3 dispatchThreadId : SV_DispatchThreadID)
{
	const float3 cameraOrigin = float3(0.0, 0.0, 0.0); // all computations are relative to view space

	if (dispatchThreadId.x >= mWorkGroups.x || dispatchThreadId.y >= mWorkGroups.y)
	{
		return;
	}

	const uint index = dispatchThreadId.y * mWorkGroups.x + dispatchThreadId.x;

	float4 screenSpaceFarPlaneVertices[4]; // top left, top right, bottom left, bottom right
	screenSpaceFarPlaneVertices[0] = float4(dispatchThreadId.xy * LIGHT_TILE_SIZE, 1.0, 1.0);
	screenSpaceFarPlaneVertices[1] = float4(float2(dispatchThreadId.x + 1, dispatchThreadId.y) * LIGHT_TILE_SIZE, 1.0, 1.0);
	screenSpaceFarPlaneVertices[2] = float4(float2(dispatchThreadId.x, dispatchThreadId.y + 1) * LIGHT_TILE_SIZE, 1.0, 1.0);
	screenSpaceFarPlaneVertices[3] = float4(float2(dispatchThreadId.x + 1, dispatchThreadId.y + 1) * LIGHT_TILE_SIZE, 1.0, 1.0);

	float3 viewSpaceVerts[4];
	for (int i = 0; i < 4; i++)
	{
		float4 screenPos = screenSpaceFarPlaneVertices[i];
    	float2 texCoord = screenPos.xy / ScreenResolution; 
    	
    	float4 viewSpacePos = mul(InvProjMat, float4(float2(texCoord.x, 1.0f - texCoord.y) * 2.0f - 1.0f, screenPos.z, screenPos.w));
    	viewSpacePos = viewSpacePos / viewSpacePos.w;

		viewSpaceVerts[i] = viewSpacePos.xyz;
	}

	TileFrustum frustum;
	frustum.mPlanes[0] = PackPlaneIntoFloat4(viewSpaceVerts[2], cameraOrigin, viewSpaceVerts[0]);
	frustum.mPlanes[1] = PackPlaneIntoFloat4(viewSpaceVerts[1], cameraOrigin, viewSpaceVerts[3]);
	frustum.mPlanes[2] = PackPlaneIntoFloat4(viewSpaceVerts[0], cameraOrigin, viewSpaceVerts[1]);
	frustum.mPlanes[3] = PackPlaneIntoFloat4(viewSpaceVerts[3], cameraOrigin, viewSpaceVerts[2]);

	OutputTileFrustums[index] = frustum;
}

#endprogram
