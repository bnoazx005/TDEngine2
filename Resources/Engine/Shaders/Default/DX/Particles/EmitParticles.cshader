#define COMPUTE_ENTRY MainCS

#program compute

#include <TDEngine2Globals.inc>
#include <TDEngine2MathUtils.inc>
#include <TDEngine2ParticlesUtils.inc>


DECLARE_WRITEABLE_TYPED_BUFFER_EX(TParticle, OutputParticles, 0);
DECLARE_WRITEABLE_TYPED_BUFFER_EX(uint, DeadParticlesIndexList, 1); // first index is used for counter

DECLARE_TEX2D_EX(RandTexture, 1)

// particles buffer

// emitter's configuration
CBUFFER_SECTION_EX(EmitterParameters, 4)
	// box emitter's data
	float4 mBoxSizes;

	// sphere/cone emitter's data
	float  mSphereConeRadius;
	float  mConeHeight;
	float  mPad0;

	// common 
	float  mDuration;
	float4 mPosition;
	float4 mShapeOrigin;
	float4 mVelocity;
	float4 mInitialLifetime; // x - left bound, y - right bound, value lies in range of [x; y] 
	float4 mInitialSize; // x - left bound, y - right bound, value lies in range of [x; y] 
	float4 mInitialRotation;
	float4 mInitialColor;

	uint   mIs2DEmitter;
	uint   mMaxParticles;
	uint   mEmitRate;
	uint   mEmitterType;
CBUFFER_ENDSECTION


[numthreads(1024, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
	uint counter = DeadParticlesIndexList[0];

	if (id.x >= counter || id.x >= mEmitRate) 
		return;

	TParticle newParticle = (TParticle)0;

	float4 randValue = TEX2D_LOD(RandTexture, float2(id.x / 1024.0, Time.x), 0);
	float4 randValue1 = TEX2D_LOD(RandTexture, float2((id.x + 1.0) / 1024.0, Time.x), 0);

	newParticle.mPosition = float4(0.0, 0.0, 0.0, 0.0); // TODO
	newParticle.mVelocity = mVelocity; // TODO

	newParticle.mRotation = lerp(mInitialRotation.x, mInitialRotation.y, randValue.x);

	newParticle.mColor = mInitialColor;

	newParticle.mLifetime = lerp(mInitialLifetime.x, mInitialLifetime.y, randValue.y);
	newParticle.mAge = newParticle.mLifetime;

	newParticle.mSize = lerp(mInitialSize.x, mInitialSize.y, randValue.z); // TODO

	// decrement counter for dead particles list
	InterlockedAdd(DeadParticlesIndexList[0], -1, counter);
	if (counter < 0)
	{
		InterlockedAdd(DeadParticlesIndexList[0], 1);
		return;
	}

	uint index = DeadParticlesIndexList[counter];

	OutputParticles[index] = newParticle;
}

#endprogram
