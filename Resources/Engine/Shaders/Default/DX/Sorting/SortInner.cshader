#define COMPUTE_ENTRY MainCS

#program compute

#include <TDEngine2Globals.inc>

#define SORT_SIZE   512
#define HALF_SIZE   (SORT_SIZE/2)
#define ITERATIONS  (HALF_SIZE > 1024 ? HALF_SIZE/1024 : 1)
#define NUM_THREADS (HALF_SIZE/ITERATIONS)
#define INVERSION   (16*2 + 8*3)


DECLARE_WRITEABLE_TYPED_BUFFER_EX(float2, OutputData, 0);
DECLARE_TYPED_BUFFER_EX(uint, ElementsCount, 0);


groupshared float2 LDS[SORT_SIZE];


[numthreads(NUM_THREADS, 1, 1)]
void MainCS(uint3 groupId : SV_GroupID, uint3 dispatchId : SV_DispatchThreadID, uint3 groupThreadId : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{
    uint elementsCount = ElementsCount[0];

    int4 tgp;

    tgp.x = groupId.x * 256;
    tgp.y = 0;
    tgp.z = elementsCount;
    tgp.w = min(512, max(0, elementsCount - groupId.x * 512));

    int GlobalBaseIndex = tgp.y + tgp.x * 2 + groupThreadId.x;
    int LocalBaseIndex  = groupIndex;
    int i;

    // Load shared data
    [unroll]
    for (i = 0; i < 2; ++i)
    {
        if (groupIndex + i * NUM_THREADS < tgp.w)
            LDS[LocalBaseIndex + i * NUM_THREADS] = OutputData[GlobalBaseIndex + i * NUM_THREADS];
    }

    GroupMemoryBarrierWithGroupSync();

    // sort threadgroup shared memory
    for (int nMergeSubSize = SORT_SIZE >> 1; nMergeSubSize > 0; nMergeSubSize = nMergeSubSize >> 1) 
    {           
        int tmp_index = groupIndex;
        int index_low = tmp_index & (nMergeSubSize - 1);
        int index_high = 2 * (tmp_index - index_low);
        int index = index_high + index_low;

        uint nSwapElem = index_high + nMergeSubSize + index_low;

        if(nSwapElem < tgp.w)
        {
            float2 a = LDS[index];
            float2 b = LDS[nSwapElem];

            if (a.x > b.x)
            { 
                LDS[index] = b;
                LDS[nSwapElem] = a;
            }
        }

        GroupMemoryBarrierWithGroupSync();
    }
    
    // Store shared data
    [unroll]
    for (i = 0; i < 2; ++i)
    {
        if (groupIndex + i * NUM_THREADS < tgp.w)
            OutputData[GlobalBaseIndex + i * NUM_THREADS] = LDS[LocalBaseIndex + i * NUM_THREADS];
    }
}

#endprogram
