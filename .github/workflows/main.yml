name: TDEngine2 SDK Build

on: 
  push:
  pull_request:


jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} 
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "TDEngine2_SDK.zip",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            archiver: "7z a",
            generators: "\"Visual Studio 17 2022\"",
            platform: "Win64",
            architecture: "x64"
          }
        - {
            name: "Ubuntu_GCC_9",
            os: ubuntu-latest,
            artifact: "TDEngine2_SDK.zip",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Unix Makefiles",
            platform: "Ubuntu",
            architecture: "x64"
          }
        # - {
        #     name: "Ubuntu Clang",
        #     os: ubuntu-latest,
        #     artifact: "TDEngine2_SDK.7z",
        #     build_type: "Release",
        #     cc: "clang",
        #     cxx: "clang++",
        #     archiver: "7za a",
        #     generators: "Unix Makefiles"
        #   }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo github.ref ${{github.ref}}

      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
        # cmd "${{ matrix.config.environment_script }}"

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu')
        run: |
          bash ./CI/travis/install.sh

      - name: Build UNIX
        if: startsWith(matrix.config.name, 'Ubuntu')
        shell: bash
        run: |
          cd build
          chmod +x prepare_build_generic_unix.sh
          ./prepare_build_generic_unix.sh ${{ matrix.config.build_type }}

      - name: Build Windows
        if: startsWith(matrix.config.name, 'windows')
        shell: cmd
        run: |
          cd build
          prepare_build_generic_win.bat ${{ matrix.config.generators }} ${{ matrix.config.build_type }} ${{ matrix.config.architecture }}

      - name: Test
        working-directory: build
        run: |
          ctest -C ${{ matrix.config.build_type }} --output-on-failure

      - name: Pack
        shell: bash
        working-directory: build
        run: |
          cd ..
          ${{ matrix.config.archiver }} ${{ matrix.config.artifact }} bin/${{ matrix.config.build_type }}/ Resources/ README.md LICENSE CHANGELOG.md TDEngine2/

      # - name: Deploy
      #   if: contains( ${{ github.head_ref }}, 'master' )
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: TDEngine2_SDK-v0.5.${{ github.run_number }}-${{ matrix.config.platform }}
      #     release_name: TDEngine2_SDK-v0.5.${{ github.run_number }}-${{ matrix.config.platform }}  #TDEngine2_SDK-v$(appveyor_build_version)-Win32
      #     draft: false
      #     prerelease: false

      # - name: Upload Archive
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./${{ matrix.config.artifact }}
      #     asset_name: ${{ matrix.config.artifact }}
      #     asset_content_type: application/zip
