#include "./../include/CDirectInputMappings.h"


#if defined (TDE2_USE_WIN32PLATFORM)

namespace TDEngine2
{
	U16 CDirectInputMappings::GetKeyCode(E_KEYCODES keyCode)
	{
		switch (keyCode)
		{
			case E_KEYCODES::KC_ESCAPE:
				return DIK_ESCAPE;
			case E_KEYCODES::KC_ALPHA0:
				return DIK_0;
			case E_KEYCODES::KC_ALPHA1:
				return DIK_1;
			case E_KEYCODES::KC_ALPHA2:
				return DIK_2;
			case E_KEYCODES::KC_ALPHA3:
				return DIK_3;
			case E_KEYCODES::KC_ALPHA4:
				return DIK_4;
			case E_KEYCODES::KC_ALPHA5:
				return DIK_5;
			case E_KEYCODES::KC_ALPHA6:
				return DIK_6;
			case E_KEYCODES::KC_ALPHA7:
				return DIK_7;
			case E_KEYCODES::KC_ALPHA8:
				return DIK_8;
			case E_KEYCODES::KC_ALPHA9:
				return DIK_9;
			case E_KEYCODES::KC_NUMPAD0:
				return DIK_NUMPAD0;
			case E_KEYCODES::KC_NUMPAD1:
				return DIK_NUMPAD1;
			case E_KEYCODES::KC_NUMPAD2:
				return DIK_NUMPAD2;
			case E_KEYCODES::KC_NUMPAD3:
				return DIK_NUMPAD3;
			case E_KEYCODES::KC_NUMPAD4:
				return DIK_NUMPAD4;
			case E_KEYCODES::KC_NUMPAD5:
				return DIK_NUMPAD5;
			case E_KEYCODES::KC_NUMPAD6:
				return DIK_NUMPAD6;
			case E_KEYCODES::KC_NUMPAD7:
				return DIK_NUMPAD7;
			case E_KEYCODES::KC_NUMPAD8:
				return DIK_NUMPAD8;
			case E_KEYCODES::KC_NUMPAD9:
				return DIK_NUMPAD9;
			case E_KEYCODES::KC_A:
				return DIK_A;
			case E_KEYCODES::KC_B:
				return DIK_B;
			case E_KEYCODES::KC_C:
				return DIK_C;
			case E_KEYCODES::KC_D:
				return DIK_D;
			case E_KEYCODES::KC_E:
				return DIK_E;
			case E_KEYCODES::KC_F:
				return DIK_F;
			case E_KEYCODES::KC_G:
				return DIK_G;
			case E_KEYCODES::KC_H:
				return DIK_H;
			case E_KEYCODES::KC_I:
				return DIK_I;
			case E_KEYCODES::KC_J:
				return DIK_J;
			case E_KEYCODES::KC_K:
				return DIK_K;
			case E_KEYCODES::KC_L:
				return DIK_L;
			case E_KEYCODES::KC_M:
				return DIK_M;
			case E_KEYCODES::KC_N:
				return DIK_N;
			case E_KEYCODES::KC_O:
				return DIK_O;
			case E_KEYCODES::KC_P:
				return DIK_P;
			case E_KEYCODES::KC_Q:
				return DIK_Q;
			case E_KEYCODES::KC_R:
				return DIK_R;
			case E_KEYCODES::KC_S:
				return DIK_S;
			case E_KEYCODES::KC_T:
				return DIK_T;
			case E_KEYCODES::KC_U:
				return DIK_U;
			case E_KEYCODES::KC_V:
				return DIK_V;
			case E_KEYCODES::KC_W:
				return DIK_W;
			case E_KEYCODES::KC_X:
				return DIK_X;
			case E_KEYCODES::KC_Y:
				return DIK_Y;
			case E_KEYCODES::KC_Z:
				return DIK_Z;
			case E_KEYCODES::KC_F1:
				return DIK_F1;
			case E_KEYCODES::KC_F2:
				return DIK_F2;
			case E_KEYCODES::KC_F3:
				return DIK_F3;
			case E_KEYCODES::KC_F4:
				return DIK_F4;
			case E_KEYCODES::KC_F5:
				return DIK_F5;
			case E_KEYCODES::KC_F6:
				return DIK_F6;
			case E_KEYCODES::KC_F7:
				return DIK_F7;
			case E_KEYCODES::KC_F8:
				return DIK_F8;
			case E_KEYCODES::KC_F9:
				return DIK_F9;
			case E_KEYCODES::KC_F10:
				return DIK_F10;
			case E_KEYCODES::KC_F11:
				return DIK_F11;
			case E_KEYCODES::KC_F12:
				return DIK_F12;
			case E_KEYCODES::KC_F13:
				return DIK_F13;
			case E_KEYCODES::KC_F14:
				return DIK_F14;
			case E_KEYCODES::KC_F15:
				return DIK_F15;
			case E_KEYCODES::KC_SPACE:
				return DIK_SPACE;
			case E_KEYCODES::KC_LSHIFT:
				return DIK_LSHIFT;
			case E_KEYCODES::KC_RSHIFT:
				return DIK_RSHIFT;
			case E_KEYCODES::KC_LALT:
				return DIK_LALT;
			case E_KEYCODES::KC_RALT:
				return DIK_RMENU;
			case E_KEYCODES::KC_CAPSLOCK:
				return DIK_CAPITAL;
			case E_KEYCODES::KC_TAB:
				return DIK_TAB;
			case E_KEYCODES::KC_RETURN:
				return DIK_RETURN;
			case E_KEYCODES::KC_LCONTROL:
				return DIK_LCONTROL;
			case E_KEYCODES::KC_RCONTROL:
				return DIK_RCONTROL;
			case E_KEYCODES::KC_RIGHT:
				return DIK_RIGHT;
			case E_KEYCODES::KC_UP:
				return DIK_UP;
			case E_KEYCODES::KC_LEFT:
				return DIK_LEFT;
			case E_KEYCODES::KC_DOWN:
				return DIK_DOWN;
			case E_KEYCODES::KC_HOME:
				return DIK_HOME;
 			case E_KEYCODES::KC_END:
				return DIK_END;
			case E_KEYCODES::KC_PAGEUP:
				return DIK_PRIOR;
 			case E_KEYCODES::KC_PAGEDOWN:
				return DIK_NEXT;
			case E_KEYCODES::KC_PAUSE:
			case E_KEYCODES::KC_BREAK:
				return DIK_PAUSE;
			case E_KEYCODES::KC_BACKSPACE:
				return DIK_BACKSPACE;
			case E_KEYCODES::KC_DELETE:
				return DIK_DELETE;
			case E_KEYCODES::KC_INSERT:
				return DIK_INSERT;
			case E_KEYCODES::KC_LSYS:
				return DIK_LWIN;
 			case E_KEYCODES::KC_RSYS:
				return DIK_RWIN;
			/*case E_KEYCODES::KC_EXCLAIM:
				return DIK_;
 			case E_KEYCODES::KC_AT:
				return DIK_AT;
 			case E_KEYCODES::KC_DOUBLE_QUOTE:
				return DIK_DOUBLE;
 			case E_KEYCODES::KC_HASH:
				return DIK_HASH;
 			case E_KEYCODES::KC_DOLLAR:
				return DIK_DOLLAR;
 			case E_KEYCODES::KC_PERCENT:
				return DIK_PERCENT;
 			case E_KEYCODES::KC_AMPERSAND:
				return DIK_;
			case E_KEYCODES::KC_QUOTE:
				return DIK_;
 			case E_KEYCODES::KC_LPAREN:
				return DIK_LPAREN;
 			case E_KEYCODES::KC_RPAREN:
				return DIK_;
 			case E_KEYCODES::KC_ASTERISK:
				return DIK_;*/
 			case E_KEYCODES::KC_PLUS:
			case E_KEYCODES::KC_EQUALS:
				return DIK_EQUALS;
 			case E_KEYCODES::KC_MINUS:
				return DIK_MINUS;
			case E_KEYCODES::KC_COMMA:
				return DIK_COMMA;
 			case E_KEYCODES::KC_PERIOD:
				return DIK_PERIOD;
 			case E_KEYCODES::KC_SLASH:
				return DIK_SLASH;
 			case E_KEYCODES::KC_BACKSLASH:
			case E_KEYCODES::KC_PIPE:
				return DIK_BACKSLASH;
 			case E_KEYCODES::KC_COLON:
				return DIK_COLON;
 			case E_KEYCODES::KC_SEMICOLON:
				return DIK_SEMICOLON;
 			/*case E_KEYCODES::KC_LESS:
				return DIK_LESS;
			case E_KEYCODES::KC_GREATER:
				return DIK_GREATER;
 			case E_KEYCODES::KC_QUESTION:
				return DIK_;*/
 			case E_KEYCODES::KC_LBRACKET:
				return DIK_LBRACKET;
 			case E_KEYCODES::KC_RBRACKET:
				return DIK_RBRACKET;
 			/*case E_KEYCODES::KC_CARET:
				return DIK_CARET;
 			case E_KEYCODES::KC_UNDERSCORE:
				return DIK_UNDERSCORE;
			case E_KEYCODES::KC_LCURLY_BRACKET:
				return DIK_;
 			case E_KEYCODES::KC_RCURLY_BRACKET:
				return DIK_;*/
 			case E_KEYCODES::KC_TILDE:
			case E_KEYCODES::KC_BACK_QUOTE:
				return DIK_GRAVE;
			case E_KEYCODES::KC_NUMLOCK:
				return DIK_NUMLOCK;
			case E_KEYCODES::KC_SCROLL_LOCK:
				return DIK_SCROLL;
			case E_KEYCODES::KC_PRINT:
			case E_KEYCODES::KC_SYSREQ:
				return DIK_SYSRQ;
		}

		return 0;
	}

	U16 CDirectInputMappings::GetGamepadButton(E_GAMEPAD_BUTTONS button)
	{
		switch (button)
		{
			case E_GAMEPAD_BUTTONS::GB_UP:
				return 0x1;
			case E_GAMEPAD_BUTTONS::GB_DOWN:
				return 0x2;
			case E_GAMEPAD_BUTTONS::GB_LEFT:
				return 0x4; 
			case E_GAMEPAD_BUTTONS::GB_RIGHT:
				return 0x8; 
			case E_GAMEPAD_BUTTONS::GB_START:
				return 0x10;
			case E_GAMEPAD_BUTTONS::GB_BACK:
				return 0x20;
			case E_GAMEPAD_BUTTONS::GB_LTHUMB:
				return 0x40; 
			case E_GAMEPAD_BUTTONS::GB_RTHUMB:
				return 0x80;
			case E_GAMEPAD_BUTTONS::GB_LSHOULDER:
				return 0x100; 
			case E_GAMEPAD_BUTTONS::GB_RSHOULDER:
				return 0x200;
			case E_GAMEPAD_BUTTONS::GB_A:
				return 0x1000; 
			case E_GAMEPAD_BUTTONS::GB_B:
				return 0x2000; 
			case E_GAMEPAD_BUTTONS::GB_X:
				return 0x4000; 
			case E_GAMEPAD_BUTTONS::GB_Y:
				return 0x8000;
		}

		return 0x0;
	}
}

#endif